# Bot config

# Bot mode
# spin, sweet scent, bunny hop, coords, bonk, fishing, starters, lugia, ho-oh
# rayquaza, groudon, kyogre, southern island, mew, regis, deoxys runaways
# deoxys reset, fossil, castform, beldum, johto starters, buy premier balls
bot_mode: legendary

# Coords - this config is used if `bot_mode` is set to `coords`
# Runs between 2 different x,y coordinates (use `view_coords.lua` in Bizhawk to view coords)
coords:
  pos1:
    - 13
    - 94
  pos2:
    - 9
    - 94

# Bonk direction - this config is used if `bot_mode` is set to `bonk`
# Bonk mode will run left/right or up/down repeatedly until the trainer hits a wall
# horizontal, vertical
bonk_direction: horizontal

# Starters - this config is used if `bot_mode` is set to `starters`
# Choose a Pokémon to soft reset for, save the game with trainer facing the bag
# mudkip, treecko, torchic
starter: mudkip

# Johto starters - this config is used if `bot_mode` is set to `johto starters`
# Choose a Pokémon to soft reset for, save the game with trainer facing the desired Pokeball in Birch's lab
# totodile, cyndaquil, chikorita
johto_starter: totodile

# Fossils - this config is used if `bot_mode` is set to `fossil`
# Save with trainer facing the Fossil Scientist in Devon after handing over the fossil and re-entering the room
# anorith,lileep
fossil: anorith

# Set true if the Deoxys puzzle is solved already and the last save is on the tile in front of the red triangle
deoxys_puzzle_solved: false

# User Interface config
ui:
  enable: true
  width: 1280
  height: 720

# Web Server config (server must be enabled for the UI to work)
server:
  enable: true
  ip: 127.0.0.1
  port: 8888 # The server port must be unique for each instance of the bot you run

# Bot instance ID
# If running multiple instances of the bot
# Set this to the same `bot_instance_id` string at the top of pokebot.lua (use a unique string per bot instance)
bot_instance_id: pokebot_1

# Autosaves
# Auto save every n encounters
# Set to 0 to disable
autosave_encounters: 1000

# Backups
# Backup pokebot stats/ folder every n encounters
# HIGHLY recommended to backup stats/ folder regularly, totals.json is known to get corrupted during power outages
# Make sure you regularly delete old backups (especially if your stats folder is large!)
# Set to 0 to disable
backup_stats: 5000

# Auto catch
# (if disabled the bot will pause and wait for you to manually catch)
# You will note to pause pokebot.lua in the Lua console to control your character
auto_catch: true

# Enable party leader to use Spore to sleep the wild Pokémon
use_spore: true

# Toggle catching shinies on/off
# CustomCatchConfig.py allows you to add filters to catch specific non-shiny Pokémon
catch_shinies: true

# Toggle battling all other wild Pokémon
# Catching shinies and Pokémon in CustomCatchConfig.py always takes priority over battling
battle: false

# Pokeball preferences (if no overrides are specified below)
# Top of the list is priority, bottom is least
# dive_ball, great_ball, luxury_ball, master_ball, nest_ball,
# poke_ball, premier_ball, repeat_ball, timer_ball, ultra_ball
pokeball_priority:
- premier_ball
- ultra_ball
- great_ball
- poke_ball

# Pokeball overrides to catch specific Pokémon with specific balls
# Falls back to pokeball_priority if it has no Pokeballs in the list
pokeball_override:
  Abra:
  - ultra_ball
  - great_ball

# Cycle to next Pokémon if the lead Pokémon faints
cycle_lead_pokemon: true

# Save the game and flush save RAM after any catch
save_game_after_catch: true

# Enable pickup - https://bulbapedia.bulbagarden.net/wiki/Pickup_(Ability)#Generations_III_and_IV
pickup: true
# Number of pickup items to find before collection
pickup_threshold: 3

# Pokémon encounter .csv data logging (logs to stats/encounters/ folder)
log: true

# Discord Webhook settings
discord:
  # Discord rich presence
  # Display current location + total stats and encounters/h
  rich_presence: false
  # Toggle ALL webhook messages on/off
  messages: false
  # Your default Discord webhook URL, WARNING: this webhook is SENSITIVE! Do not share this value with anyone!
  # If you leak your webhook, anyone will be able to post in your channel!
  webhook_url: https://discord.com/api/webhooks/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  # Choose how the IVs will display, either basic layout on one line or formatted for readability
  iv_format: formatted

  # Ping mode (a ping is a @<ping_id> in Discord, it adds a +1 badge to the channel)
  # Leave ping_mode empty for messages you don't want to be @ pinged for
  # Valid options: "user" or "role"

  # Discord messages: Shiny Pokémon encounter
  # Example: "Shiny Seedot encountered at Route 102! (+ summary of phase stats)"
  shiny_pokemon_encounter:
    enable: true
    ping_mode:  # user or role
    ping_id:
    # Optional webhook (uncomment) to post this notification to a different channel (defaults to `webhook_url` if not set)
    #webhook_url:

  # Discord messages: Pokémon encounter milestones messages every n encounters
  # Example: "Achieved 10,000 total Seedot encounters!", "Achieved 20,000 total Seedot encounters!" etc.
  pokemon_encounter_milestones:
    enable: true
    interval: 10000
    ping_mode:  # user or role
    ping_id:
    # Optional webhook (uncomment) to post this notification to a different channel (defaults to `webhook_url` if not set)
    #webhook_url:

  # Discord messages: Shiny Pokémon encounter milestones every n encounters
  # Example: "Achieved 5 total shiny ✨Seedot✨ encounters!", "Achieved 10 total ✨Seedot✨ encounters!" etc.
  shiny_pokemon_encounter_milestones:
    enable: true
    interval: 5
    ping_mode:  # user or role
    ping_id:
    # Optional webhook (uncomment) to post this notification to a different channel (defaults to `webhook_url` if not set)
    #webhook_url:

  # Discord messages: Total encounter milestones every n encounters
  # Example: "Achieved 25,000 total encounters!", "Achieved 50,000 total encounters!" etc.
  total_encounter_milestones:
    enable: true
    interval: 25000
    ping_mode:  # user or role
    ping_id:
    # Optional webhook (uncomment) to post this notification to a different channel (defaults to `webhook_url` if not set)
    #webhook_url:

  # Discord messages: Phase summary
  # Example: "Current phase has reached 8,192 encounters!" + a bunch of stats about the current phase
  # Stats include phase IV sum records, phase SV records, same Pokémon streak, current total encounters and shinies
  phase_summary:
    enable: true
    # Example (default config): first notification will be at 8,192 encounters, then at 10,000, 15,000, 20,000, 25,000 etc.
    first_interval: 8192
    consequent_interval: 5000
    ping_mode:  # user or role
    ping_id:
    # Optional webhook (uncomment) to post this notification to a different channel (defaults to `webhook_url` if not set)
    #webhook_url:

# Banned moves
# Any moves in this list will not be used in battle
banned_moves:
- None
  # 2-turn
- Bounce
- Dig
- Dive
- Fly
- Sky Attack
- Razor Wind
- Doom Desire
- Solar Beam
  # Inconsistent
- Fake Out
- False Swipe
- Nature Power
- Present
- Destiny Bond
- Wrap
- Snore
- Spit Up
- Bide
- Bind
- Counter
- Future Sight
- Mirror Coat
- Grudge
- Snatch
- Spite
- Curse
- Endeavor
- Revenge
- Assist
- Focus Punch
- Eruption
- Flail
  # Ends battle
- Roar
- Whirlwind
- Selfdestruct
- Perish Song
- Explosion
- Memento

# Cheats
# Perform "cheaty" actions such as peeking into eggs to check shininess, knowing instantly which route a roamer is on, instantly locate Feebas tiles etc.
mem_hacks: false

# Misc. settings
# Only use these if you know what you're doing
misc:
  # Shiny Pokémon delay (delay catching a shiny encounter by n seconds)
  shiny_delay: 0

  # OBS settings
  obs:
    # When enabled, the bot will !!! emulate the hotkey keystrokes !!! so only use this on dedicated stream PCs
    # Take stream screenshot after the `shiny_delay` to allow overlays to update
    enable_screenshot: false
    # Save the stream replay buffer after `replay_buffer_delay`
    enable_replay_buffer: false

    # Hotkey to save a screenshot of a stream (bot expects .png format if posting to Discord)
    hotkey_screenshot: ["ctrl", "f11"]
    # Hotkey to save the replay buffer of a stream
    hotkey_replay_buffer: ["ctrl", "f12"]

    # Wait n seconds after a shiny encounter is logged, before saving the replay buffer
    # (runs in a separate thread and doesn't pause the bot itself)
    replay_buffer_delay: 0
    # OBS replays save directory (used to post stream screenshot to Discord)
    replay_dir: "./stream/replays/"
    # Webhook to post the shiny stream screenshot to Discord
    # Leave empty to disable posting
    webhook_url: